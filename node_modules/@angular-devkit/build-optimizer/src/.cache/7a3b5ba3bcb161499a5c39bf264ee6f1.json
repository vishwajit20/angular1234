{"remainingRequest":"C:\\Users\\kartik\\Angular-Assignment\\Assignment\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js??ref--8-1!C:\\Users\\kartik\\Angular-Assignment\\Assignment\\node_modules\\angularfire2\\angularfire2.js","dependencies":[{"path":"C:\\Users\\kartik\\Angular-Assignment\\Assignment\\node_modules\\angularfire2\\angularfire2.js","mtime":499162500000},{"path":"C:\\Users\\kartik\\Angular-Assignment\\Assignment\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1607672914170},{"path":"C:\\Users\\kartik\\Angular-Assignment\\Assignment\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js","mtime":1528256844000}],"contextDependencies":[],"result":["import { InjectionToken } from '@angular/core';\r\nimport { isPlatformServer } from '@angular/common';\r\nimport { Observable, queueScheduler as queue } from 'rxjs';\r\nexport var RealtimeDatabaseURL = new InjectionToken('angularfire2.realtimeDatabaseURL');\r\nvar FirebaseZoneScheduler = /*@__PURE__*/ (function () {\r\n    function FirebaseZoneScheduler(zone, platformId) {\r\n        this.zone = zone;\r\n        this.platformId = platformId;\r\n    }\r\n    FirebaseZoneScheduler.prototype.schedule = function () {\r\n        var args = [];\r\n        for (var _i = 0; _i < arguments.length; _i++) {\r\n            args[_i] = arguments[_i];\r\n        }\r\n        return this.zone.runGuarded(function () { return queue.schedule.apply(queue, args); });\r\n    };\r\n    FirebaseZoneScheduler.prototype.keepUnstableUntilFirst = function (obs$) {\r\n        if (isPlatformServer(this.platformId)) {\r\n            return new Observable(function (subscriber) {\r\n                var noop = function () { };\r\n                var task = Zone.current.scheduleMacroTask('firebaseZoneBlock', noop, {}, noop, noop);\r\n                obs$.subscribe(function (next) {\r\n                    if (task.state === 'scheduled') {\r\n                        task.invoke();\r\n                    }\r\n                    ;\r\n                    subscriber.next(next);\r\n                }, function (error) {\r\n                    if (task.state === 'scheduled') {\r\n                        task.invoke();\r\n                    }\r\n                    subscriber.error(error);\r\n                }, function () {\r\n                    if (task.state === 'scheduled') {\r\n                        task.invoke();\r\n                    }\r\n                    subscriber.complete();\r\n                });\r\n            });\r\n        }\r\n        else {\r\n            return obs$;\r\n        }\r\n    };\r\n    FirebaseZoneScheduler.prototype.runOutsideAngular = function (obs$) {\r\n        var _this = this;\r\n        return new Observable(function (subscriber) {\r\n            return _this.zone.runOutsideAngular(function () {\r\n                return obs$.subscribe(function (value) { return _this.zone.run(function () { return subscriber.next(value); }); }, function (error) { return _this.zone.run(function () { return subscriber.error(error); }); }, function () { return _this.zone.run(function () { return subscriber.complete(); }); });\r\n            });\r\n        });\r\n    };\r\n    return FirebaseZoneScheduler;\r\n}());\r\nexport { FirebaseZoneScheduler };\r\nexport var runOutsideAngular = function (zone) {\r\n    return function (obs$) {\r\n        return new Observable(function (subscriber) {\r\n            return zone.runOutsideAngular(function () {\r\n                return obs$.subscribe(function (value) { return zone.run(function () { return subscriber.next(value); }); }, function (error) { return zone.run(function () { return subscriber.error(error); }); }, function () { return zone.run(function () { return subscriber.complete(); }); });\r\n            });\r\n        });\r\n    };\r\n};\r\n//# sourceMappingURL=angularfire2.js.map\r\n",null]}